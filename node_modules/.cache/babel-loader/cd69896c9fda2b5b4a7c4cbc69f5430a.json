{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get; // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n\n\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return (\n      /*#__PURE__*/\n      React.createElement(as || 'div', _extends({\n        ref: this.handleNode\n      }, props), children)\n    );\n  };\n\n  return InView;\n}(React.Component);\n\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView;\n\n  var unobserve = React.useRef();\n\n  var _React$useState = React.useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, InView as default, defaultFallbackInView, observe, useInView };","map":{"version":3,"sources":["/Users/samnottingham/CODING/react-portfolio/node_modules/react-intersection-observer/react-intersection-observer.m.js"],"names":["React","useEffect","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","sort","filter","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_elements$get","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","callbacks","push","unobserve","splice","size","disconnect","_excluded","isPlainChildren","props","children","InView","_React$Component","_this","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","_proto","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","render","_this$state","ref","_this$props2","as","createElement","Component","displayName","defaultProps","useInView","_temp","_ref","useRef","_React$useState","useState","setRef","useCallback","current","result","default"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return /*#__PURE__*/React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(React.Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView;\n\n  var unobserve = React.useRef();\n\n  var _React$useState = React.useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, InView as default, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.m.js.map\n"]},"metadata":{},"sourceType":"module"}